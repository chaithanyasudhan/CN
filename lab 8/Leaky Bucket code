#include <stdio.h>

int min(int x, int y) {
    if (x < y)
        return x;
    else
        return y;
}

int main() {
    int drop = 0, mini, nsec, cap, count = 0, i, inp[25], process;

    // Input bucket size
    printf("Enter the bucket size:\n");
    scanf("%d", &cap);

    // Input processing rate
    printf("Enter the processing rate:\n");
    scanf("%d", &process);

    // Input number of seconds to simulate
    printf("Enter the number of seconds you want to simulate:\n");
    scanf("%d", &nsec);

    // Input packet sizes for each second
    for (i = 0; i < nsec; i++) {
        printf("Enter the size of the packet entering at %d sec:\n", i + 1);
        scanf("%d", &inp[i]);
    }

    // Printing the header
    printf("\nSecond | Packet received | Packet sent | Packet left | Dropped\n");
    printf("--------------------------------------------------------------------\n");

    // Simulating packet arrival and processing
    for (i = 0; i < nsec; i++) {
        count += inp[i];

        // Dropping packets if the count exceeds the bucket capacity
        if (count > cap) {
            drop = count - cap;
            count = cap;
        }

        // Processing packets (sending)
        mini = min(count, process);
        count -= mini;

        // Printing results for the current second
        printf("%d\t  %d\t\t  %d\t\t  %d\t\t  %d\n", i + 1, inp[i], mini, count, drop);
        drop = 0;  // Reset drop count for the next second
    }

    // If there are any remaining packets to process after all seconds
    for (; count != 0; i++) {
        // Dropping packets if count exceeds the bucket capacity
        if (count > cap) {
            drop = count - cap;
            count = cap;
        }

        // Processing packets (sending)
        mini = min(count, process);
        count -= mini;

        // Printing results for the current second (no incoming packets)
        printf("%d\t  0\t\t  %d\t\t  %d\t\t  %d\n", i + 1, mini, count, drop);
        drop = 0;  // Reset drop count for the next second
    }

    return 0;
}
